prepare_data.py:
  working_dir: .
  output_dir:
    vectors: outputs/formatted_labels
    clipped_tiles: outputs/clipped_tiles
  initial_image_dir: inputs/plans
  tile_dir: outputs/rgb_images
  border_points: inputs/ground_truth/PL_realite_terrain_20240318/PL_realite_ter_ExportFeature_final.shp
  bbox: inputs/ground_truth/PL_realite_terrain_box_20240318/PL_realite_ter_ExportFeature_box.shp
  plan_scales: inputs/plan_scales.xlsx
  # overlap_info: outputs/formatted_labels/max_point_size.csv
  tile_suffix: _geo.tif
  convert_images: True


format_surveying_data.py:
  working_dir: .
  output_dir:
    vectors: outputs/formatted_labels
  cadastral_surveying: inputs/MO/BDMO2.gpkg
  tiles: outputs/formatted_labels/subtiles.gpkg


generate_tilesets.py:
  debug_mode: 
    enable: False  # sample of tiles
    nb_tiles_max: 10
  working_directory: /home/gsalamin/Documents/GitHub/proj-borderpoints/outputs
  datasets:
    aoi_tiles: formatted_labels/subtiles.gpkg
    ground_truth_labels: formatted_labels/ground_truth_labels.gpkg
    image_source:
      type: FOLDER
      location: clipped_tiles/subtiles
      srs: 2056
  output_folder: object_detector
  overwrite: True
  n_jobs: 10
  COCO_metadata:
    year: 1800-1900
    version: 1.0
    description: Points limites des anciens plans cadastraux
    contributor: Canton of Fribourg
    url: none
    license:
      name: unknown
      url: unknown
  seed: 42

train_model.py:
  debug_mode: false
  working_directory: /home/gsalamin/Documents/GitHub/proj-borderpoints/outputs/object_detector
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_training_images
  COCO_files: # relative paths, w/ respect to the working_folder
    trn: COCO_trn.json
    val: COCO_val.json
    tst: COCO_tst.json
  detectron2_config_file: ../../config/detectron2_config.yaml # path relative to the working_folder
  model_weights:
    model_zoo_checkpoint_url: COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml


make_detections.py:
  working_directory: /home/gsalamin/Documents/GitHub/proj-borderpoints/outputs/object_detector
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files:           # relative paths, w/ respect to the working_folder
    trn: COCO_trn.json
    val: COCO_val.json
    tst: COCO_tst.json
  detectron2_config_file: ../../config/detectron2_config.yaml # path relative to the working_folder
  model_weights:
    pth_file: ./logs/model_0004749.pth # trained model minimizing the validation loss, monitor via tensorboard (tensorboard --logdir </logs>)
  image_metadata_json: img_metadata.json
  rdp_simplification:   # rdp = Ramer-Douglas-Peucker
    enabled: False
    epsilon: 0.05       # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: 0.05


assess_detections.py:
  working_directory: /home/gsalamin/Documents/GitHub/proj-borderpoints/outputs/object_detector
  output_folder: .
  datasets:
    ground_truth_labels: ../formatted_labels/ground_truth_labels.gpkg
    image_metadata_json: img_metadata.json
    split_aoi_tiles: split_aoi_tiles.geojson # aoi = Area of Interest
    detections:
      trn: trn_detections_at_0dot05_threshold.gpkg
      val: val_detections_at_0dot05_threshold.gpkg
      tst: tst_detections_at_0dot05_threshold.gpkg


post_processing.py:
  working_dir: outputs
  input_dir: object_detector
  output_dir: post_processing
  detections:
    trn: trn_detections_at_0dot05_threshold.gpkg
    val: val_detections_at_0dot05_threshold.gpkg
    tst: tst_detections_at_0dot05_threshold.gpkg
  subtiles: formatted_labels/subtiles.gpkg
  tiles: formatted_labels/tiles.gpkg
  category_ids_json: category_ids.json
  score: 0.75
  keep_datasets: True


assess_by_tile.py:
  working_dir: outputs
  output_dir: post_processing
  subtiles: object_detector/split_aoi_tiles.geojson
  ground_truth: formatted_labels/ground_truth_labels.gpkg
  category_ids_json: object_detector/category_ids.json
  name_correspondence: rgb_images/name_correspondence.csv
  keep_datasets: True
  detections: post_processing/dst_detected_points.gpkg


point_matching.py:
  working_dir: outputs
  output_dir: post_processing
  detections: post_processing/detected_points.gpkg
  border_points: formatted_labels/MO_points.gpkg


check_with_tlm_data.py:
  working_dir: .
  output_dir: outputs/post_processing
  matched_points: outputs/post_processing/matched_points.gpkg
  TLM_data:
    file: inputs/TLM_data_FR.gpkg
    layer_flowing_water: fliessgewaesser
    layer_water_bodies: stehendes_gewaesser
    layer_building_footprint: gebaeude_footprint

